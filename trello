#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/lib')

require 'config'
require 'trello_helper'
require 'output_helper'
require 'reports'
require 'report'
require 'erb'
require 'pp'
require 'yaml'
require 'i18n'
require 'commander/import'
require 'bugzilla_helper'

Encoding.default_external = "UTF-8"

name="#{__FILE__}"

program :name, "Trello Utilities"
program :version, "1.0.0"
program :description, "An assortment of Trello utilities"

# This loads the conf files and creates new objects based on the specified classes
def load_conf(klass,args,single = false)
  if single
    klass.new(args)
  else
    Hash[*args.map do |key,val|
      [key,klass.new(val)]
    end.flatten]
  end
end

$tag_to_label_color = {
  'documentation' => 'green',
  'tc-approved' => 'yellow',
  'no-qe' => 'orange',
  'security' => 'red',
  'devcut' => 'purple'
}

LINKS = {'roadmap_overview' => 'Roadmap',
         'releases_overview' => 'Releases',
         'teams_overview' => 'Teams',
         'developers_overview' => 'Developers',
         'sprints_overview' => 'Sprints',
         'labels_overview' => 'Labels',
         'sprint_schedule' => 'Sprint Schedule'}

def create_releases_overview(out, trello)
  extname = File.extname out
  filename = File.basename out, extname
  dirname = File.dirname out

  ((trello.other_products ? trello.other_products : []) + [nil]).each do |product|
    erb = ERB.new(File.open('templates/releases_overview.erb', "rb").read)
    file = nil
    if product
      file = File.join(dirname, "#{filename}_#{product}#{extname}")
    else
      file = out
    end
    File.open(file, 'w') {|f| f.write(erb.result(binding)) }
  end
end

def create_teams_overview(out, trello)
  extname = File.extname out
  filename = File.basename out, extname
  dirname = File.dirname out

  (trello.teams.keys + [nil]).each do |team|
    erb = ERB.new(File.open('templates/teams_overview.erb', "rb").read)
    file = nil
    if team
      file = File.join(dirname, "#{filename}_#{team}#{extname}")
    else
      file = out
    end
    File.open(file, 'w') {|f| f.write(erb.result(binding)) }
  end
end

def create_developers_overview(out, trello)
  extname = File.extname out
  filename = File.basename out, extname
  dirname = File.dirname out

  (trello.teams.keys + [nil]).each do |team|
    erb = ERB.new(File.open('templates/developers_overview.erb', "rb").read)
    file = nil
    if team
      file = File.join(dirname, "#{filename}_#{team}#{extname}")
    else
      file = out
    end
    File.open(file, 'w') {|f| f.write(erb.result(binding)) }
  end
end

def create_labels_overview(out, trello)
  erb = ERB.new(File.open('templates/labels_overview.erb', "rb").read)
  File.open(out, 'w') {|f| f.write(erb.result(binding)) }
end

def create_roadmap_overview(out, trello)
  erb = ERB.new(File.open('templates/roadmap_overview.erb', "rb").read)
  File.open(out, 'w') {|f| f.write(erb.result(binding)) }
end

trello = load_conf(TrelloHelper, CONFIG.trello, true)

# Sort only the release cards by their release label release number
# Sort only the cards in TrelloHelper::NEXT_STATES and TrelloHelper::BACKLOG_STATES
command :organize_release_cards do |c|

  c.option "--dry-run", "Show what changes would be made without actually making them"

  c.syntax = "#{name}"
  c.description = "Rearrange board list cards sorted by release"
  c.action do |args, options|
    release_states = TrelloHelper::NEXT_STATES.keys + TrelloHelper::BACKLOG_STATES.keys
    trello.boards.values.each do |board|
      trello.board_lists(board).each do |list|
        labels = trello.board_labels(board)
        next unless release_states.include? list.name
        puts "\n*** Processing list #{list.name} in board #{trello.board(list.board_id).name}"
        label_id_to_release_number = {}
        label_id_to_product = {}
        # Build mapping of labels (by id) to products and release
        # numbers. Products and release numbers are extracted from the
        # labels name named like "targeted-product-release_number",
        # e.g.:
        #
        #   targeted-rhelah-7.2.1
        labels.each do |label|
          if label.name =~ TrelloHelper::RELEASE_LABEL_REGEX
            label_id_to_product[label.id] = $3 if $3
            label_id_to_release_number[label.id] = Gem::Version.new($4) if $4
          end
        end
        # Build list of each unique product label segment
        products = label_id_to_product.values.uniq
        # list_cards contains the cards for this board, sorted by
        # position (i.e. as they are displayed in the UI)
        list_cards = trello.list_cards(list).sort_by { |card| card.pos }
        if options.dry_run
          puts ""
        end
        # Extract the list of cards bearing release labels
        release_cards = list_cards.select do |card|
          card_labels = trello.card_labels(card)
          card_labels.any? { |label| label_id_to_release_number.include? label.id if !label.nil? }
        end
        # card_updates accumulates the cards to be repositioned and
        # the associated position updates
        card_updates = {}
        # Sort cards in groups, according to which product they are
        # labeled for
        products.each do |product|
          cards_by_pos = []
          # Build list containing the subset of release_cards to be
          # sorted - these are already sorted by position
          release_cards.sort_by { |card| card.pos }.each do |card|
            card_labels = trello.card_labels(card)
            card_label = card_labels.find{ |label| label_id_to_release_number.include? label.id unless label.nil? }
            next unless card_label
            card_product = label_id_to_product[card_label.id]
            card_release = label_id_to_release_number[card_label.id]
            cards_by_pos << {:card => card, :release => card_release, :product => card_product, :pos => card.pos}
          end
          # Don't sort an empty list
          next if cards_by_pos.empty?
          cards_by_release = []
          # Copy the contents of cards_by_pos so we can sort and
          # update cards_by_release[:pos] without also updating
          # cards_by_pos[:pos]
          cards_by_pos.each { |card| cards_by_release << card.dup }
          cards_by_release.sort_by! { |card| card[:release] }
          # Copy card positions to cards sorted by release
          cards_by_pos.each_with_index do |card, index|
            if cards_by_release[index][:pos] != card[:pos]
              cards_by_release[index][:pos] = card[:pos]
              card_updates[cards_by_release[index][:card]] = cards_by_release[index]
            end
          end
        end

        # Cards are already sorted the way we'd like!
        next if card_updates.empty?
        card_release_prod_strings = {}
        if options.dry_run
          puts "Cards in list, pre-sort"
          list_cards.each do |card|
            if card_updates.include? card
              card_data = card_updates[card]
              card_release_prod_strings[card] = " release: #{card_data[:release]} product: #{card_data[:product]}"
            end
            puts "  #{card.name}, pos: #{card.pos}#{card_release_prod_strings[card]}"
          end
        end
        card_updates.each do |card, update_data|
          card.pos = update_data[:pos]
          # Update the card position via trello API
          trello.update_card(card) unless options.dry_run
        end
        if options.dry_run
          list_cards.sort_by! { |card| card.pos }
          puts "\nCards in list, sorted"
          list_cards.each do |card|
            if card_updates.include? card
              puts "* #{card.name}, pos: #{card.pos}#{card_release_prod_strings[card]}"
            else
              puts "  #{card.name}, pos: #{card.pos}#{card_release_prod_strings[card]}"
            end
          end
        end
      end
    end
  end
end


command :backup_org_boards do |c|

  c.option "--out-dir DIRECTORY", "Directory to dump backup json to"

  c.syntax = "#{name}"
  c.description = "dump all organization boards"
  c.action do |args, options|
    output_dir = (options.out_dir.nil? || options.out_dir.empty?) ? Pathname.pwd : Pathname.new(options.out_dir)
    if !output_dir.writable?
      $stderr.puts "Directory #{output_dir} doesn't specify a writable directory."
      exit 1
    end
    trello.org_boards.each do |board|
      unless board.nil?
        out_filename = "#{board.url.split('/').last}.json"
        out_path = File.join(output_dir, out_filename)
        puts "Backing up #{board.name} to #{out_path}"
        begin
          # cache the response so we don't create a 0-byte file if the request times out
          output = trello.dump_board_json(board)
          File.open(out_path, 'w') { |f| f.write(output)}
        rescue Exception => e
          $stderr.puts "Error while writing to #{out_path}: #{e.message}"
        end
      end
    end
  end
end

command :list do |c|
  c.syntax = "#{name} list"

  c.option "--list LIST_NAME", "Restrict to a particular list"
  c.option "--team TEAM_NAME (#{trello.teams.keys.join('|')})", "Restrict to a team"
  c.option "--card-ref SCOPE_TEAM_ID", "Get a single card Ex: #{trello.teams.values.first.keys.first}_1"
  c.option "--card-url URL", "Get a single card Ex: https://trello.com/c/6EhPEbM4"

  c.description = "An assortment of Trello queries"
  c.action do |args, options|
    puts "Organization: #{trello.org.name}"
    if options.card_ref
      card = trello.card_by_ref(options.card_ref)
      if card
        trello.print_card(card)
      else
        $stderr.puts "#{options.card_ref} is an invalid format!"
        exit 1
      end
    elsif options.card_url
      card = trello.card_by_url(options.card_url)
      if card
        trello.print_card(card)
      else
        $stderr.puts "#{options.card_url} is an invalid format!"
        exit 1
      end
    else
      if options.team
        boards = trello.team_boards(options.team)
      else
        boards = trello.org_boards
      end

      boards.each do |board|
        puts "\nBoard Name: #{board.name}"
        lists = trello.board_lists(board)
        if options.list
          lists = []
          lists.each do |list|
            if list.name == options.list
              lists = [list]
              break
            end
          end
        end
        lists.each do |list|
          trello.print_list(list)
        end
      end
    end
  end
end

command :sprint_identifier do |c|
  c.syntax = "#{name} sprint_identifier"

  c.description = "Print the sprint identifier"
  c.action do |args, options|
    if trello.sprint_card.name =~ TrelloHelper::SPRINT_REGEX
      print "#{$1}"
    else
      print "unknown"
    end
  end
end

command :days_left_in_sprint do |c|
  c.syntax = "#{name} days_left_in_sprint"

  c.description = "Print the number of days left in the sprint"
  c.action do |args, options|
    print (trello.sprint_card.due.to_time - Time.new).to_i / (60*60*24)
  end
end

command :days_until_code_freeze do |c|
  c.syntax = "#{name} days_until_code_freeze"

  c.description = "Print the number of days left until the next code freeze"
  c.action do |args, options|
    sprint = Sprint.new({:trello => trello, :uninitialized => true})
    print (sprint.code_freeze.to_time - Time.new).to_i / (60*60*24)
  end
end

command :card_ref_from_url do |c|
  c.syntax = "#{name} card_ref_from_url"

  c.option "--card-url URL", "Card url Ex: https://trello.com/c/6EhPEbM4"

  c.description = "Print the card ref based on a given url"
  c.action do |args, options|
    card = trello.card_by_url(options.card_url)
    if card
      print trello.card_ref(card)
    else
      $stderr.puts "#{options.card_url} not found!"
      exit 1
    end
  end
end

command :list_invalid_users do |c|
  c.syntax = "#{name} list_invalid_users"

  c.description = "List the potentially invalid users"
  c.action do |args, options|
    require 'ldap_helper'
    ldap = load_conf(LdapHelper, CONFIG.ldap, true)
    puts "Potential Invalid Organization Users:"
    valid_user_names = {}
    invalid_user_names = ldap.print_invalid_members(trello.org.members, valid_user_names, invalid_user_names)
    puts "\n\nPotential Invalid Board Users:"
    trello.org_boards.each do |board|
      unless board.closed?
        puts "\n#{board.name}:"
        ldap.print_invalid_members(board.members, valid_user_names, invalid_user_names.clone)
      end
    end
    puts "\n\nValid Logins:"
    puts valid_user_names.keys
  end
end

command :generate_release_json do |c|
  c.syntax = "#{name} generate_release_json"
  c.option "--out-dir DIRECTORY", "The dir to output to Ex: /tmp"
  c.option "--release RELEASE", "Release to build json for Ex: 3.3"
  c.option "--product PRODUCT", "Product to build json for Ex: myproduct"

  c.description = "Generate json for the cards in a release"
  c.action do |args, options|
    release_cards = trello.release_cards(options.product, options.release)
    if options.out_dir
      File.open(File.join(options.out_dir, "#{options.product ? options.product + '-' : '' }#{options.release}.json"), 'w') {|f| f.write(JSON.pretty_generate(release_cards)) }
    else
      pp JSON.pretty_generate(release_cards)
    end
  end
end

command :generate_trello_login_to_email_json do |c|
  c.syntax = "#{name} generate_trello_login_to_email_json"
  c.option "--out OUT_FILE", "File to output the resulting json to Ex: /tmp/trello_login_to_email.json"

  c.description = "Generate a json file with trello login -> email"
  c.action do |args, options|
    require 'ldap_helper'
    ldap = load_conf(LdapHelper, CONFIG.ldap, true)
    members = trello.org.members
    valid_users = ldap.valid_users(members)
    if options.out
      File.open(options.out, 'w') {|f| f.write(JSON.pretty_generate(valid_users)) }
    else
      pp JSON.pretty_generate(valid_users)
    end
  end
end


command :report do |c|
  c.syntax = "#{name} report"

  c.option "--report-type NAME" , "Available report types: %s" % CONFIG.reports.keys.join(', ')
  c.option "--send-email" , "Send email?"

  c.description = "An assortment of Trello reporting utilities"
  c.action do |args, options|
    options.report_type ||= choose("Report to run?",*CONFIG.reports.keys)
    options.report_type = options.report_type.to_sym
    if options.date
      $date = Date.parse(options.date)
    end

    heading "Generating Status Report" do
      # Read Rally configuration file
      _progress "Logging into Trello" do
        $sprint = Sprint.new({:trello => trello})
      end

      # Generate queries
      _progress "Generating queries" do
        $report_types = load_conf(UserStoryReport,CONFIG.queries)
      end

      # Generate reports
      _progress "Building available reports" do
        $reports = load_conf(Report,CONFIG.reports)
      end
    end

    report = $reports[options.report_type]
    report.options = options.__hash__

    _table(
      "Running Report With Options",
      report.options.marshal_dump,
      { :capitalize => true, :sort => 0, :separator => ':' }
    )

    report.send_email

  end
end

command :generate_roadmap_overview do |c|
  c.syntax = "#{name} generate_roadmap_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/roadmap_overview.html"

  c.description = "Generate the overview of the roadmap board"
  c.action do |args, options|
    options.out ||= '/tmp/roadmap_overview.html'
    create_roadmap_overview(options.out, trello)
  end
end

command :generate_sprints_overview do |c|
  c.syntax = "#{name} generate_sprints_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/sprints_overview.html"
  c.option "--sprints NUM", "The number of sprints to show"
  c.option "--offset NUM", "The number of sprints to offset from the latest"

  c.description = "Generate the sprints overview"
  c.action do |args, options|
    options.out ||= '/tmp/sprints_overview.html'
    options.sprints = options.sprints ? options.sprints.to_i : 8
    options.offset = options.offset ? options.offset.to_i : 0

    erb = ERB.new(File.open('templates/sprints_overview.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :generate_sprint_schedule do |c|
  c.syntax = "#{name} generate_sprint_schedule"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/sprint_schedule.html"
  c.option "--sprints NUM", "The number of sprints to show"

  c.description = "Generate the sprint schedule"
  c.action do |args, options|
    options.out ||= '/tmp/sprint_schedule.html'
    options.sprints = options.sprints ? options.sprints.to_i : 8

    erb = ERB.new(File.open('templates/sprint_schedule.erb', "rb").read)
    File.open(options.out, 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :generate_labels_overview do |c|
  c.syntax = "#{name} generate_labels_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/labels_overview.html"

  c.description = "Generate the labels overview"
  c.action do |args, options|
    options.out ||= '/tmp/labels_overview.html'
    create_labels_overview(options.out, trello)
  end
end

command :generate_releases_overview do |c|
  c.syntax = "#{name} generate_releases_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/releases_overview.html"

  c.description = "Generate the releases overview"
  c.action do |args, options|
    options.out ||= '/tmp/releases_overview.html'
    create_releases_overview(options.out, trello)
  end
end

command :generate_teams_overview do |c|
  c.syntax = "#{name} generate_teams_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/teams_overview.html"

  c.description = "Generate the teams overview"
  c.action do |args, options|
    options.out ||= '/tmp/teams_overview.html'
    create_teams_overview(options.out, trello)
  end
end

command :generate_developers_overview do |c|
  c.syntax = "#{name} generate_developers_overview"

  c.option "--out OUT_FILE", "The file to output Ex: /tmp/developers_overview.html"

  c.description = "Generate the developers overview"
  c.action do |args, options|
    options.out ||= '/tmp/developers_overview.html'
    create_developers_overview(options.out, trello)
  end
end

command :generate_default_overviews do |c|
  c.syntax = "#{name} generate_default_overviews"

  c.option "--out-dir DIRECTORY", "The dir to output to Ex: /tmp"

  c.description = "Generate the default overviews"
  c.action do |args, options|
    options.out_dir ||= '/tmp'

    create_roadmap_overview(File.join(options.out_dir, 'roadmap_overview.html'), trello)
    create_releases_overview(File.join(options.out_dir, 'releases_overview.html'), trello)
    create_labels_overview(File.join(options.out_dir, 'labels_overview.html'), trello)
    create_teams_overview(File.join(options.out_dir, 'teams_overview.html'), trello)
    create_developers_overview(File.join(options.out_dir, 'developers_overview.html'), trello)

    options.sprints = options.sprints ? options.sprints.to_i : 14
    options.offset = options.offset ? options.offset.to_i : 0

    erb = ERB.new(File.open('templates/sprints_overview.erb', "rb").read)
    File.open(File.join(options.out_dir, 'sprints_overview.html'), 'w') {|f| f.write(erb.result(binding)) }
  end
end

command :comment do |c|
  c.syntax = "#{name} comment"

  c.option "--card-ref SCOPE_TEAM_ID", "Card to comment on by ref Ex: #{trello.teams.values.first.keys.first}_1"
  c.option "--card-url URL", "Card to comment on by url Ex: https://trello.com/c/6EhPEbM4"

  c.description = "Adds a comment to a trello card"
  c.action do |args, options|
    comment = args[0]
    card = nil
    if options.card_ref
      card = trello.card_by_ref(options.card_ref)
    elsif options.card_url
      card = trello.card_by_url(options.card_url)
    end
    if card
      card.add_comment(comment)
    else
      $stderr.puts "#{options.card_ref || options.card_url} is an invalid format!"
      exit 1
    end
  end

end

command :sync_labels do |c|
  c.syntax = "#{name} sync_labels"

  c.description = "Sync the labels from the roadmap board to all the rest"
  c.action do |args, options|
    roadmap_label_colors_by_name = trello.roadmap_label_colors_by_name
    unless roadmap_label_colors_by_name.empty?
      boards = [trello.public_roadmap_board] + trello.boards.values
      boards.each do |board|
        puts "\nBoard Name: #{board.name}"
        board_labels = trello.target(trello.board_labels(board))
        board_labels_by_name = {}
        empty_labels_by_color = {}
        board_labels.each do |board_label|
          if board_label.name.nil? || board_label.name.empty?
            empty_labels_by_color[board_label.color] = board_label if board_label.color
          else
            board_labels_by_name[board_label.name] = board_label
          end
        end

        raise "Duplicate labels found: #{board.name}" unless board_labels_by_name.length + empty_labels_by_color.length == board_labels.length
        roadmap_label_colors_by_name.each do |label_name, label_color|
          board_label = board_labels_by_name[label_name] || empty_labels_by_color[label_color]
          if !board_label || (label_color != board_label.color) || empty_labels_by_color[label_color]
            if board_label
              puts "Updating label #{label_name} to #{label_color}"
              board_label.color = (label_color.nil? || label_color.empty?) ? '' : label_color
              board_label.name = label_name
              trello.update_label(board_label)
              empty_labels_by_color.delete(label_color) if empty_labels_by_color[label_color]
            else
              puts "Setting label #{label_name} to #{label_color}"
              created = false
              create_retry_count = 0
              while !created
                begin
                  trello.create_label(label_name, label_color, board.id)
                  created = true
                rescue => e
                  board_labels = trello.target(trello.board_labels(board))
                  created = board_labels.map{|l| l.name }.include?(label_name)
                  unless created
                    $stderr.puts "Error creating label: #{e.message}"
                    raise if create_retry_count >= TrelloHelper::DEFAULT_RETRIES
                  end
                end
                create_retry_count += 1
              end
            end
          end
        end
        board_labels = trello.target(trello.board_labels(board))
        board_labels.each do |board_label|
          if !roadmap_label_colors_by_name.has_key?(board_label.name)
            puts "Deleting label #{board_label.name}"
            begin
              trello.delete_label(board_label)
            rescue => e
              $stderr.puts "Error deleting label: #{e.message}"
            end
          end
        end
      end
    end
  end
end

command :rename_label do |c|
  c.syntax = "#{name} rename_label"

  c.option "--from FROM", "The label to rename"
  c.option "--to TO", "What to rename it to"

  c.description = "Renames a label on all the boards"
  c.action do |args, options|

    raise "--from not specified" if options.from.nil? || options.from.strip.empty?
    raise "--to not specified" if options.to.nil? || options.to.strip.empty?

    from = options.from.strip
    to = options.to.strip

    boards = trello.roadmap_boards + trello.boards.values
    boards.each do |board|
      puts "\nBoard Name: #{board.name}"
      board_labels = trello.target(trello.board_labels(board))
      board_label = nil
      board_labels.each do |bl|
        if from == bl.name
          board_label = bl
          break
        end
      end

      if board_label.nil?
        puts "  #{from} not found on #{board.name}"
      else
        puts "  Updating label #{from} to #{to}"
        board_label.name = options.to
        trello.update_label(board_label)
      end
    end
  end
end

command :convert_markers_to_labels do |c|
  c.syntax = "#{name} sync_labels"

  c.description = "Convert [] markers on cards to epic- and future labels that exist"
  c.action do |args, options|
    boards = trello.boards.values
    boards.each do |board|
      puts "\nBoard Name: #{board.name}"
      board_labels = trello.target(trello.board_labels(board))
      board_labels_by_name = {}
      board_labels.each do |board_label|
        board_labels_by_name[board_label.name] = board_label
      end
      lists = trello.board_lists(board)
      lists.each do |list|
        cards = trello.list_cards(list)
        unless cards.empty?
          puts "\n  List: #{list.name}  (#cards: #{cards.length})"
          cards.each_with_index do |card, index|
            card_name = card.name
            card_tags = card_name.scan(/\[[^\]]+\]/)
            card_tags.each do |card_tag|
              card_tag.downcase!
              if card_tag == TrelloHelper::FUTURE_TAG
                epic_label_name = TrelloHelper::FUTURE_LABEL
              else
                epic_label_name = "epic-#{card_tag[1..-2]}"
              end
              if board_labels_by_name.has_key? epic_label_name
                unless trello.card_labels(card).map{|c| c.name }.include?(epic_label_name)
                  epic_label = board_labels_by_name[epic_label_name]
                  puts "Adding #{epic_label.name} to #{card.name} (#{card.url})"
                  trello.add_label_to_card(card, epic_label)
                end
                card_name = card_name.sub "#{card_tag} ", ''
                card_name = card_name.sub " #{card_tag}", ''
                card_name = card_name.sub card_tag, ''
                card.name = card_name
                puts "New card name #{card.name}"
                trello.update_card(card)
              end
            end
          end
        end
      end
    end
  end
end

command :update do |c|
  c.syntax = "#{name} update"

  c.option "--add-task-checklists", "Add task checklists to stories"
  c.option "--add-bug-checklists", "Add checklists to stories"
  c.option "--add-doc-tasks", "Add documentation tasks to documentation labeled stories"
  c.option "--add-doc-cards", "Add documentation cards for documentation labeled dev cards"
  c.option "--update-bug-tasks", "Update closed/verified bug tasks"
  c.option "--update-roadmap", "Update the roadmap board with progress from teams.  Note: Existing checklist items will be removed."

  c.description = "An assortment of Trello modification utilities"
  c.action do |args, options|
    doc_cards = []
    if options.update_roadmap
      trello.update_roadmap
    end
    if options.add_doc_cards
      lists = trello.board_lists(trello.documentation_board)
      lists.each do |list|
        cards = trello.list_cards(list)
        if !cards.empty?
          puts "\n  List: #{list.name}  (#cards #{cards.length})"
          cards.each_with_index do |card, index|
            if !(card.name =~ TrelloHelper::SPRINT_REGEX && !card.due.nil?)
              doc_cards << card
            end
          end
        end
      end
    end
    if options.add_task_checklists || options.add_bug_checklists || options.update_bug_tasks || options.add_doc_tasks || options.add_doc_cards
      bugzilla = nil
      if options.update_bug_tasks
        bugzilla = load_conf(BugzillaHelper, CONFIG.bugzilla, true)
      end
      documentation_board_labels = nil
      if options.add_doc_cards
        documentation_board_labels = trello.target(trello.board_labels(trello.documentation_board))
        documentation_board_labels_by_name = {}
        documentation_board_labels.each do |board_label|
          documentation_board_labels_by_name[board_label.name] = board_label
        end
      end
      trello.boards.each do |board_id, board|
        next if board_id == trello.documentation_board.id
        puts "\nBoard Name: #{board.name}"
        lists = trello.board_lists(board)
        lists.each do |list|
          if TrelloHelper::CURRENT_SPRINT_NOT_ACCEPTED_STATES.include?(list.name)
            cards = trello.list_cards(list)
            if !cards.empty?
              puts "\n  List: #{list.name}  (#cards #{cards.length})"
              cards.each_with_index do |card, index|
                if options.add_task_checklists || options.add_bug_checklists || options.add_doc_cards
                  if !(card.name =~ TrelloHelper::SPRINT_REGEX && !card.due.nil?)
                    labels = trello.card_labels(card)
                    label_names = labels.map{|l| l.name }
                    checklists = []
                    checklists << 'Tasks' if options.add_task_checklists
                    checklists << 'Bugs' if options.add_bug_checklists && !label_names.include?('no-qe')

                    if options.add_doc_cards && label_names.include?('documentation') && doc_cards.any?
                      docs_card = nil
                      doc_cards.each do |d_card|
                        if d_card.desc.include?(card.short_url)
                          docs_card = d_card
                          break
                        end
                      end
                      unless docs_card
                        name = card.name
                        if card.name =~ TrelloHelper::CARD_NAME_REGEX
                          name = $2.strip
                        end
                        docs_card = Trello::Card.create(:name => "Document: #{name}", :desc => "Corresponding Development Card: #{card.short_url}", :list_id => trello.documentation_next_list.id)
                      end
                      # Sync release labels from the dev card to the docs card
                      release_labels = []
                      label_names.each do |label_name|
                        if label_name =~ TrelloHelper::RELEASE_LABEL_REGEX
                          release_labels << label_name
                        end
                      end
                      docs_card_labels = trello.card_labels(docs_card)
                      docs_card_label_names = docs_card_labels.map{|l| l.name }
                      docs_card_release_labels = []
                      docs_card_label_names.each do |docs_card_label_name|
                        if docs_card_label_name =~ TrelloHelper::RELEASE_LABEL_REGEX
                          docs_card_release_labels << docs_card_label_name
                        end
                      end
                      labels_to_remove = docs_card_release_labels - release_labels
                      labels_to_add = release_labels - docs_card_release_labels
                      labels_to_remove.each do |label_name|
                        label = documentation_board_labels_by_name[label_name]
                        if label
                          puts "Removing #{label_name} from #{docs_card.name} (#{docs_card.url})"
                          trello.remove_label_from_card(docs_card, label, false)
                        end
                      end
                      labels_to_add.each do |label_name|
                        label = documentation_board_labels_by_name[label_name]
                        if label
                          puts "Adding #{label_name} to #{docs_card.name} (#{docs_card.url})"
                          trello.add_label_to_card(docs_card, label, false)
                        end
                      end
                    end

                    trello.list_checklists(card).each do |checklist|
                      checklists.delete(checklist.name)
                      break if checklists.empty?
                    end if !checklists.empty?

                    if checklists.any?
                      puts "Adding #{checklists.pretty_inspect.chomp} to #{card.name}"
                      checklists.each do |checklist_name|
                        trello.create_checklist(card, checklist_name)
                      end
                    end
                  end
                end
                if options.update_bug_tasks
                  ['Bugs', 'Tasks'].each do |cl|
                    bugs_checklist = trello.checklist(card, cl)
                    if bugs_checklist
                      bugs_checklist.items.each do |item|
                        item_name = item.name.strip
                        if item_name =~ TrelloHelper::BUGZILLA_REGEX
                          bug_url = $1
                          status = bugzilla.bug_status_by_url(bug_url)
                          if status == 'VERIFIED' || status == 'CLOSED'
                            if !item.complete?
                              puts "Marking complete: #{item_name}"
                              trello.checklist_add_item(bugs_checklist, item_name, true, 'bottom')
                              trello.checklist_delete_item(bugs_checklist, item)
                            end
                          else
                            if item.complete?
                              puts "Marking incomplete: #{item_name}"
                              trello.checklist_add_item(bugs_checklist, item_name, false, 'top')
                              trello.checklist_delete_item(bugs_checklist, item)
                            end
                          end
                        end
                      end
                    end
                  end
                end
                if options.add_doc_tasks
                  if trello.card_labels(card).map{|label| label.name }.include?("documentation")
                    tasks_checklist = trello.checklist(card, 'Tasks')
                    if tasks_checklist
                      doc_reminder = "Update this card (in the description or in a comment) with details about what needs to be documented."
                      found = false
                      tasks_checklist.items.each do |item|
                        if item.name.include? doc_reminder
                          found = true
                          break
                        end
                      end
                      unless found
                        puts "Adding documentation reminder: #{card.name}"
                        trello.checklist_add_item(tasks_checklist, doc_reminder, false, 'bottom')
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
